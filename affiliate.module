<?php

/**
 * @file
 * Contains hook implementations for the Affiliate module.
 */

use Drupal\affiliate\Hooks\AffiliateHooks;
use Drupal\Core\Hook\LegacyHook;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Legacy hook implementation.
 *
 * @todo Remove this method when support for Drupal core < 11.1 is dropped.
 */
#[LegacyHook]
function affiliate_help($route_name, RouteMatchInterface $route_match) {
  \Drupal::service(AffiliateHooks::class)->help($route_name, $route_match);
}

/**
 * Helper function to adds the affiliate params to a url object.
 */
function affiliate_url_set_affiliate_params(Url $url, $affiliate, $campaign = NULL) {
  /** @var \Drupal\Core\Url $url */
  $config = \Drupal::config('affiliate.settings');
  switch ($config->get('affiliate_code_type')) {
    case 'username':
      $affiliate_code = $affiliate->getAccountName();
      break;

    case 'user_id':
    default:
      $affiliate_code = $affiliate->id();
      break;
  }
  $url->setRouteParameter($config->get('affiliate_key'), $affiliate_code);
  if ($campaign) {
    $url->setRouteParameter($config->get('campaign_key'), $campaign->id());
  }
  $url->setOption('absolute', TRUE);
  return $url;
}

/**
 * Implements hook_token_info_alter().
 */
function affiliate_token_info_alter(&$data) {
  $data['tokens']['affiliate_conversion']['parent'] = [
    'name' => t("Parent entity"),
    'description' => t('The parent entity for the conversion'),
  ];
}

/**
 * Implements hook_tokens().
 */
function affiliate_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $token_service = \Drupal::token();
  $replacements = [];
  if ($type == 'affiliate_conversion' && !empty($data['affiliate_conversion'])) {
    /** @var \Drupal\affiliate\Entity\AffiliateConversion $affiliate_conversion */
    $conversion = $data['affiliate_conversion'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'parent':
          $entity = $conversion->getParentEntity();
          $bubbleable_metadata->addCacheableDependency($entity);
          $title = $entity->label();
          $replacements[$original] = $title;
          break;
      }
    }
    // Chained token relationships.
    if ($entity_tokens = $token_service->findwithPrefix($tokens, 'parent')) {
      /** @var \Drupal\Core\Entity\EntityInterface $entity */
      $entity = $conversion->getParentEntity();
      $replacements += $token_service->generate($entity->getEntityTypeId(), $entity_tokens, [$entity->getEntityTypeId() => $entity], $options, $bubbleable_metadata);
    }
  }

  return $replacements;
}
